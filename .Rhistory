gctorture(FALSE)
plot(cars)
plot(cars)
# IMPORTS
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(RVAideMemoire)) install.packages("RVAideMemoire")
library(RVAideMemoire)
if(!require(car)) install.packages("car")
library(car)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(corrplot)) install.packages("corrplot")
library(corrplot)
# IMPORTS
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(RVAideMemoire)) install.packages("RVAideMemoire")
library(RVAideMemoire)
if(!require(car)) install.packages("car")
library(car)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(corrplot)) install.packages("corrplot")
library(corrplot)
# CARREGAMENTO
set.seed(42)
data_raw <- read.csv('respostas_form_23_07_2022.csv')
data_no_date <- data_raw[,-c(1)] # Remove datatime
data_no_date
data_no_date
# CARREGAMENTO
set.seed(42)
data_raw <- read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
data_no_date <- data_raw[,-c(1)] # Remove datatime
data_no_date
data_no_date
data_no_date[,ncol(data_no_date)]
# CARREGAMENTO
set.seed(42)
data_raw <- read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
data_no_date <- data_raw[,-c(1)] # Remove datatime
data_no_date
data_no_date[,nrow(data_no_date)]
# IMPORTS
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(RVAideMemoire)) install.packages("RVAideMemoire")
library(RVAideMemoire)
if(!require(car)) install.packages("car")
library(car)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(corrplot)) install.packages("corrplot")
library(corrplot)
# CARREGAMENTO
set.seed(42)
data_raw <- read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
data_no_date <- data_raw[,-c(1)] # Remove datatime
data_no_date
data_no_date[,nrow(data_no_date)]
data_no_date[nrow(data_no_date),]
colnames(data_no_date)
colnames(data_no_date)
rownames(data_no_date)
data_no_date[1,]
data_no_date[Estou.de.acordo.com.o.uso.anônimo.das.minhas.respostas.,]
data_no_date["Estou.de.acordo.com.o.uso.anônimo.das.minhas.respostas.",]
data_no_date["Estou.de.acordo.com.o.uso.anônimo.das.minhas.respostas."]
# CARREGAMENTO
set.seed(42)
df_raw <- read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date <- data_raw[,-c(1)] # Remove datatime
df_no_date
which(colnames(df_no_date)=="Estou.de.acordo.com.o.uso.anônimo.das.minhas.respostas.")
# CARREGAMENTO
set.seed(42)
df_raw <- read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_no_consent <- data_raw[,-c(1,2)] # Remove datatime and consent afirmation
df_no_date_no_consent
df_no_date_no_consent
df_no_date_no_consent[1,]
df_no_date_no_consent[,1]
df_no_date_no_consent[1,1]
df_no_date_no_consent[1,]
which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_no_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
non_appliable_participants = which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_date_no_consent[-c(non_appliable_participants),]
df_no_date_no_consent[-c(non_appliable_participants),]
df_no_date_no_consent[-c(non_appliable_participants),]
nrow(df_no_date_no_consent[-c(non_appliable_participants),])
ncols(df_no_date_no_consent[-c(non_appliable_participants),])
ncol(df_no_date_no_consent[-c(non_appliable_participants),])
df_no_date_no_consent
colnames(df_no_date_no_consent)
df_no_date_no_consent[-c(non_appliable_participants_2),]
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_no_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
non_appliable_participants = which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
non_appliable_participants_2 = which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
df_no_date_no_consent[-c(non_appliable_participants_2),]
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_no_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
non_appliable_participants = which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_non_appliable_participants = df_no_date_no_consent[-c(non_appliable_participants),]
non_appliable_participants_2 = which(df_no_date_no_consent["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
df_no_non_appliable_participants = df_no_date_no_consent[-c(non_appliable_participants_2),]
df_no_date_no_consent[-c(non_appliable_participants_2),]
df_no_date_no_consent
nrows(df_no_date_no_consent)
ncols(df_no_date_no_consent)
nrows(df_no_date_no_consent)
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
remove_part_idx = which(df_no_date_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_no_date_no_consent[-c(remove_part_idx),] #
remove_part_idx_2 = which(df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
df_no_part = df_no_part[-c(remove_part_idx_2),]
df_no_part
df_no_part
df_no_part
nrow(df_no_part)
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
remove_part_idx = which(df_no_date_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_no_date_no_consent[-c(remove_part_idx),] #
#remove_part_idx_2 = which(df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
#df_no_part = df_no_part[-c(remove_part_idx_2),]
df_no_part
nrow(df_no_part)
remove_part_idx_2 = which(df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
remove_part_idx_2
df_no_part = df_no_part[-c(integer(0)),]
df_no_part
df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."]
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
df_no_date_consent = data_raw[,-c(1,2)] # Remove datatime and consent afirmation
remove_part_idx = which(df_no_date_consent["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_no_date_no_consent[-c(remove_part_idx),] #
#remove_part_idx_2 = which(df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."] == "Não")
#df_no_part = df_no_part[-c(remove_part_idx_2),]
df_no_part["Você.cursou.disciplinas.no.formato.remoto.DURANTE.a.pandemia.do.COVID.19."]
which(df_no_part["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."])
which(colnames(df_no_part) == "Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19.")
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
remove_part_idx = which(df_raw["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_raw[-c(remove_part_idx),]
df_no_date_consent = df_raw[,-c(1,2,3,4)] # Remove datatime and consent afirmation
df_no_date_consent
nrow(df_no_date_consent)
ncol(df_no_date_consent)
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
remove_part_idx = which(df_raw["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_raw[-c(remove_part_idx),]
df_no_date_consent = df_no_part[,-c(1,2,3,4)] # Remove datatime and consent afirmation
df_no_date_consent
nrow(df_no_date_consent)
ncol(df_no_date_consent)
colnames(df_no_date_consent)
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
remove_part_idx = which(df_raw["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_raw[-c(remove_part_idx),]
df_filter_row_col = df_no_part[,-c(1,2,3,4)] # Remove datatime and consent afirmation
df = setNames(df_filter_row_col, c("RemotoEstimulouAprendizado", "NotaCondizAprendizado", "RemotoImpactoPositivo", "RemotoCRAAumentou", "ImpactoMotivacaoCurso", "ImpactoDificuldadeLugarCalmo", "ImpactoRespDomesticas", "ImpactoEncontrarAjuda", "ImpactoMalestar", "ImpactoNovasRespFinanceiras", "ImpactoConectividade", "ImpactoComputador", "ImpactoMetodologiaProf"))
df
# CARREGAMENTO
set.seed(42)
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
remove_part_idx = which(df_raw["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_raw[-c(remove_part_idx),]
df_filter_row_col = df_no_part[,-c(1,2,3,4)] # Remove datatime and consent afirmation
df = setNames(df_filter_row_col, c("RemotoEstimulouAprendizado", "NotaCondizAprendizado", "RemotoImpactoPositivo", "RemotoCRAAumentou", "ImpactoMotivacaoCurso", "ImpactoDificuldadeLugarCalmo", "ImpactoRespDomesticas", "ImpactoEncontrarAjuda", "ImpactoMalestar", "ImpactoNovasRespFinanceiras", "ImpactoConectividade", "ImpactoComputador", "ImpactoMetodologiaProf"))
df$RemotoCRAAumentou = ifelse(df$RemotoCRAAumentou == "Sim", 1, 0)
df[df=="Nenhum Impacto"] = 1
df[df=="Impacto Baixo"] = 2
df[df=="Impacto Médio"] = 3
df[df=="Impacto Alto"] = 4
df[df=="Impacto Altíssimo"] = 5
df
#Análise dos dados
median(df$RemotoEstimulouAprendizado)
#Análise da coluna "CRA Aumentou"
mean(df$RemotoCRAAumentou)
barplot(prop.table(df$RemotoCRAAumentou) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa",
horiz = TRUE
col = rainbow(2))
barplot(prop.table(df$RemotoCRAAumentou) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa",
horiz = TRUE, col = rainbow(2))
df$RemotoCRAAumentou
barplot(prop.table(table(df$RemotoCRAAumentou)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa",
horiz = TRUE, col = rainbow(2))
# CARREGAMENTO
set.seed(42)
# Removendo colunas e linhas desnecessários
df_raw = read.csv('respostas_form_23_07_2022.csv', fileEncoding = "UTF-8")
remove_part_idx = which(df_raw["Você.cursou.disciplinas.no.formato.presencial.ANTES.da.pandemia.do.COVID.19."] == "Não")
df_no_part = df_raw[-c(remove_part_idx),]
# Removendo colunas desnenecesárias
df_filter_row_col = df_no_part[,-c(1,2,3,4)] # Remove datatime and consent afirmation
# Renomeando colunas
df = setNames(df_filter_row_col, c("RemotoEstimulouAprendizado", "NotaCondizAprendizado", "RemotoImpactoPositivo", "RemotoCRAAumentou.non_disc", "ImpactoMotivacaoCurso", "ImpactoDificuldadeLugarCalmo", "ImpactoRespDomesticas", "ImpactoEncontrarAjuda", "ImpactoMalestar", "ImpactoNovasRespFinanceiras", "ImpactoConectividade", "ImpactoComputador", "ImpactoMetodologiaProf"))
# Discretizando escala likert nos dados
df$RemotoCRAAumentou = ifelse(df$RemotoCRAAumentou.non_disc == "Sim", 1, 0)
df[df=="Nenhum Impacto"] = 1
df[df=="Impacto Baixo"] = 2
df[df=="Impacto Médio"] = 3
df[df=="Impacto Alto"] = 4
df[df=="Impacto Altíssimo"] = 5
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa",
horiz = TRUE, col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa %",
horiz = TRUE, col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 10, 20), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100, 10), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0:100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = seq(0, 100, by=10), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100, sample(seq(0,100),5),
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100, sample(seq(0,100),10),
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100, sample(seq(0,100),10),
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, col = rainbow(2))
#barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
#ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
#horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
ggplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 10)
# IMPORTS
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(RVAideMemoire)) install.packages("RVAideMemoire")
library(RVAideMemoire)
if(!require(car)) install.packages("car")
library(car)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(corrplot)) install.packages("corrplot")
library(corrplot)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
#barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
#ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
#horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
ggplot2(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 10)
#barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
#ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
#horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
ggplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 10)
#barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
#ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
#horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
ggplot(df$RemotoCRAAumentou.non_disc) * 10)
#barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
#ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
#horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
#ggplot(df$RemotoCRAAumentou.non_disc)
table(df$RemotoCRAAumentou.non_disc)
table(df$RemotoCRAAumentou.non_disc)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.95)
hist(df$RemotoEstimulouAprendizado)
boxplot(df$RemotoEstimulouAprendizado)
boxplot(df$RemotoEstimulouAprendizado)
mode(df$RemotoEstimulouAprendizado)
boxplot(df$RemotoEstimulouAprendizado)
print(mode(df$RemotoEstimulouAprendizado))
print(mode(df$RemotoEstimulouAprendizado))
mode(df$RemotoEstimulouAprendizado)
mode(df$RemotoEstimulouAprendizado)
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
#ggplot(df$RemotoCRAAumentou.non_disc)
```{r}
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
hist(df$RemotoEstimulouAprendizado)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = FALSE, xlim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = FALSE, ylim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, ylim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
barplot(prop.table(table(df$RemotoEstimulouAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#ggplot(df$RemotoCRAAumentou.non_disc)
#Análise da coluna "RemotoEstimulouAprendizado"
mode(df$RemotoEstimulouAprendizado)
#Análise da coluna "RemotoEstimulouAprendizado"
summary(df$RemotoEstimulouAprendizado)
barplot(prop.table(table(df$NotaCondizAprendizado)) * 100,
ylab = "Ensino remoto estimulou o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
barplot(prop.table(table(df$NotaCondizAprendizado)) * 100,
ylab = "Notas foram condizentes com o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#Análise da coluna "RemotoEstimulouAprendizado"
summary(df$RemotoEstimulouAprendizado)
#Análise da coluna "RemotoEstimulouAprendizado"
summary(df$NotaCondizAprendizado)
barplot(prop.table(table(df$RemotoImpactoPositivo)) * 100,
ylab = "Notas foram condizentes com o aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
#Análise da coluna "RemotoEstimulouAprendizado"
summary(df$RemotoImpactoPositivo)
# Comentar no artigo: as notas não afetaram negativamente nem positivamente o aprendizado
# dado que a mediana foi 3 (neutro).
barplot(prop.table(table(df$RemotoImpactoPositivo)) * 100,
ylab = "O ensino remoto impactou positivamente no aprendizado", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(5))
qq_plot = {qqnorm(df$RemotoImpactoPositivo, main='Plot QQ Normal', xlab = 'Quantis Teóricos', ylab = 'Quantis da Amostra')
qqline(df$RemotoImpactoPositivo)}
qq_plot = {qqnorm(df$NotaCondizAprendizado, main='Plot QQ Normal', xlab = 'Quantis Teóricos', ylab = 'Quantis da Amostra')
qqline(df$NotaCondizAprendizado)}
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.95)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.95)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.9)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.95)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.99)
wilcox.test(df$RemotoEstimulouAprendizado, alternative = c("greater"),
mu = 3, conf.level = 0.95)
barplot(prop.table(table(df$RemotoCRAAumentou.non_disc)) * 100,
ylab = "CRA Aumentou durante o período remoto", xlab = "Frequência Relativa (%)",
horiz = TRUE, xlim = c(0, 100), col = rainbow(2))
#ggplot(df$RemotoCRAAumentou.non_disc)
table(df$RemotoCRAAumentou.non_disc)
remove_part_idx = which(df$RemotoCRAAumentou == 1)
remove_part_idx = which(df$RemotoCRAAumentou == 1)
remove_part_idx
cra_aumentou_idx = which(df$RemotoCRAAumentou == 1)
df[c(cra_aumentou_idx),]
cra_aumentou_idx = which(df$RemotoCRAAumentou == 1)
galera_cra_aumentou = df[c(cra_aumentou_idx),]
galera_cra_aumentou
nrow(galera_cra_aumentou)
tabela_impactoPositivo_aprendizadoEstimulado = table(df$RemotoImpactoPositivo, df$RemotoEstimulouAprendizado)
quiqua2 = chisq.test(tabela_impactoPositivo_aprendizadoEstimulado)
quiqua2
quiqua2$expected
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="black", tl.srt=0)
# IMPORTS
if(!require(dplyr)) install.packages("dplyr")
library(dplyr)
if(!require(RVAideMemoire)) install.packages("RVAideMemoire")
library(RVAideMemoire)
if(!require(car)) install.packages("car")
library(car)
if(!require(psych)) install.packages("psych")
library(psych)
if(!require(rstatix)) install.packages("rstatix")
library(rstatix)
if(!require(corrplot)) install.packages("corrplot")
library(corrplot)
if(!require(ggplot2)) install.packages("ggplot2")
library(ggplot2)
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="black", tl.srt=0)
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="purple", tl.srt=0)
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="black", tl.srt=0)
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="black", tl.srt=0) # Indícios de relação linear entre o estímulo de aprendizagem e o um impacto positivo entre
corrplot(quiqua2$stdres, is.cor = FALSE,
method = "color",
tl.col="black", tl.srt=0) # Indícios de relação linear entre o sentir-se estimulado no ensino remoto e o o aprendizado ser impactado positivamente
tabela_impactoPositivo_aprendizadoEstimulado = table(df$RemotoImpactoPositivo, df$RemotoEstimulouAprendizado)
quiqua2 = chisq.test(tabela_impactoPositivo_aprendizadoEstimulado, simulate.p.value = TRUE)
quiqua2
tabela_impactoPositivo_aprendizadoEstimulado = table(df$RemotoImpactoPositivo, df$RemotoEstimulouAprendizado)
quiqua2 = chisq.test(tabela_impactoPositivo_aprendizadoEstimulado)
quiqua2
tabela_impactoPositivo_aprendizadoEstimulado = table(df$RemotoImpactoPositivo, df$RemotoEstimulouAprendizado)
quiqua2 = chisq.test(tabela_impactoPositivo_aprendizadoEstimulado, simulate.p.value = TRUE)
quiqua2
